
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async greet(name: string) : Promise<string> {
    return await TAURI_INVOKE("greet", { name });
},
async downloadYtSections(url: string, start: number, end: number) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("download_yt_sections", { url, start, end }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async startTranscribe(audioId: string, model: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("start_transcribe", { audioId, model }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async startTranscribeService(audioId: string, model: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("start_transcribe_service", { audioId, model }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async startTranscribeServiceStreaming(audioId: string, model: string, initialPrompt: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("start_transcribe_service_streaming", { audioId, model, initialPrompt }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async checkModelHealth() : Promise<Result<boolean, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("check_model_health") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async startOauthServer(state: string) : Promise<Result<number, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("start_oauth_server", { state }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async stopOauthServer(port: number) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("stop_oauth_server", { port }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async handleLogin(sub: string, email: string, name: string, picture: string | null, emailVerified: boolean, tokens: TokenData) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("handle_login", { sub, email, name, picture, emailVerified, tokens }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async checkPersistUser() : Promise<Result<SessionWithUser | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("check_persist_user") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async logoutUser() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("logout_user") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async handleCreateAudio(audioData: CreateAudioData) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("handle_create_audio", { audioData }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async handleGetAudioList(token: string) : Promise<Result<AudioListItem[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("handle_get_audio_list", { token }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async handleGetAudioItem(token: string, audioId: string) : Promise<Result<AudioItem, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("handle_get_audio_item", { token, audioId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async handleUpdateAudioTranscribe(token: string, audioId: string) : Promise<Result<AudioItem, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("handle_update_audio_transcribe", { token, audioId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async handleDeleteAudio(token: string, audioId: string) : Promise<Result<AudioListItem[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("handle_delete_audio", { token, audioId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async handleCreateBookmarkItem(token: string, audioId: string, bookmarkId: number) : Promise<Result<BookmarkDictationView[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("handle_create_bookmark_item", { token, audioId, bookmarkId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async handleDeleteBookmarkItem(token: string, audioId: string, bookmarkId: number) : Promise<Result<BookmarkDictationView[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("handle_delete_bookmark_item", { token, audioId, bookmarkId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async handleCreateDictationItem(token: string, audioId: string, dictationId: number) : Promise<Result<BookmarkDictationView[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("handle_create_dictation_item", { token, audioId, dictationId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async handleDeleteDictationItem(token: string, audioId: string, dictationId: number) : Promise<Result<BookmarkDictationView[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("handle_delete_dictation_item", { token, audioId, dictationId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async handleGetBookmarkDictationCombined(token: string, audioId: string) : Promise<Result<BookmarkDictationView[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("handle_get_bookmark_dictation_combined", { token, audioId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async handleGetAppSettings(token: string) : Promise<Result<AppSettings, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("handle_get_app_settings", { token }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async handleUpdateAppSettings(token: string, request: UpdateSettingsRequest) : Promise<Result<AppSettings, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("handle_update_app_settings", { token, request }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async handleUpdateUserName(token: string, newName: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("handle_update_user_name", { token, newName }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type AppSettings = { id: number; currentUserId: string | null; theme: string; language: string; selectedModel: string; modelProxy: string | null; lastLogin: string | null; autoLogin: boolean }
export type AudioItem = ({ id: string; title: string; description: string | null; url: string; thumbnail: string | null; startTime: number; endTime: number; provider: string; tag: string | null; transcribe: number; updatedAt: string }) & { exerciseType: string | null }
export type AudioListItem = { id: string; title: string; description: string | null; url: string; thumbnail: string | null; startTime: number; endTime: number; provider: string; tag: string | null; transcribe: number; updatedAt: string }
export type BookmarkDictationView = { userId: string; audioId: string; bookmarkId: number | null; bookmarkPosition: number | null; bookmarkCreatedAt: string | null; dictationId: number | null; dictationPosition: number | null; dictationCreatedAt: string | null }
export type CreateAudioData = { audio_id: string; token: string; title: string; description: string | null; url: string; thumbnail: string; start_time: number; end_time: number; provider: string; tag: string | null }
export type SessionWithUser = { userId: string; accessToken: string; name: string; email: string; picture: string | null }
export type TokenData = { access_token: string | null; access_token_expires_at: number | null; refresh_token: string | null; refresh_token_expires_at: number | null }
export type UpdateSettingsRequest = { theme: string | null; language: string | null; selectedModel: string | null; modelProxy: string | null; autoLogin: boolean | null }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
